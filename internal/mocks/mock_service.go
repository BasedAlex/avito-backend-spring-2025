// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	auth "github.com/basedalex/avito-backend-2025-spring/internal/auth"
	dto "github.com/basedalex/avito-backend-2025-spring/internal/generated"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetPvz mocks base method.
func (m *MockService) GetPvz(w http.ResponseWriter, r *http.Request, params dto.GetPvzParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPvz", w, r, params)
}

// GetPvz indicates an expected call of GetPvz.
func (mr *MockServiceMockRecorder) GetPvz(w, r, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPvz", reflect.TypeOf((*MockService)(nil).GetPvz), w, r, params)
}

// PostDummyLogin mocks base method.
func (m *MockService) PostDummyLogin(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostDummyLogin", w, r)
}

// PostDummyLogin indicates an expected call of PostDummyLogin.
func (mr *MockServiceMockRecorder) PostDummyLogin(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostDummyLogin", reflect.TypeOf((*MockService)(nil).PostDummyLogin), w, r)
}

// PostLogin mocks base method.
func (m *MockService) PostLogin(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostLogin", w, r)
}

// PostLogin indicates an expected call of PostLogin.
func (mr *MockServiceMockRecorder) PostLogin(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostLogin", reflect.TypeOf((*MockService)(nil).PostLogin), w, r)
}

// PostProducts mocks base method.
func (m *MockService) PostProducts(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostProducts", w, r)
}

// PostProducts indicates an expected call of PostProducts.
func (mr *MockServiceMockRecorder) PostProducts(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProducts", reflect.TypeOf((*MockService)(nil).PostProducts), w, r)
}

// PostPvz mocks base method.
func (m *MockService) PostPvz(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostPvz", w, r)
}

// PostPvz indicates an expected call of PostPvz.
func (mr *MockServiceMockRecorder) PostPvz(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostPvz", reflect.TypeOf((*MockService)(nil).PostPvz), w, r)
}

// PostPvzPvzIdCloseLastReception mocks base method.
func (m *MockService) PostPvzPvzIdCloseLastReception(w http.ResponseWriter, r *http.Request, pvzId uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostPvzPvzIdCloseLastReception", w, r, pvzId)
}

// PostPvzPvzIdCloseLastReception indicates an expected call of PostPvzPvzIdCloseLastReception.
func (mr *MockServiceMockRecorder) PostPvzPvzIdCloseLastReception(w, r, pvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostPvzPvzIdCloseLastReception", reflect.TypeOf((*MockService)(nil).PostPvzPvzIdCloseLastReception), w, r, pvzId)
}

// PostPvzPvzIdDeleteLastProduct mocks base method.
func (m *MockService) PostPvzPvzIdDeleteLastProduct(w http.ResponseWriter, r *http.Request, pvzId uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostPvzPvzIdDeleteLastProduct", w, r, pvzId)
}

// PostPvzPvzIdDeleteLastProduct indicates an expected call of PostPvzPvzIdDeleteLastProduct.
func (mr *MockServiceMockRecorder) PostPvzPvzIdDeleteLastProduct(w, r, pvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostPvzPvzIdDeleteLastProduct", reflect.TypeOf((*MockService)(nil).PostPvzPvzIdDeleteLastProduct), w, r, pvzId)
}

// PostReceptions mocks base method.
func (m *MockService) PostReceptions(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostReceptions", w, r)
}

// PostReceptions indicates an expected call of PostReceptions.
func (mr *MockServiceMockRecorder) PostReceptions(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostReceptions", reflect.TypeOf((*MockService)(nil).PostReceptions), w, r)
}

// PostRegister mocks base method.
func (m *MockService) PostRegister(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostRegister", w, r)
}

// PostRegister indicates an expected call of PostRegister.
func (mr *MockServiceMockRecorder) PostRegister(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRegister", reflect.TypeOf((*MockService)(nil).PostRegister), w, r)
}

// MockTokenManager is a mock of TokenManager interface.
type MockTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockTokenManagerMockRecorder
}

// MockTokenManagerMockRecorder is the mock recorder for MockTokenManager.
type MockTokenManagerMockRecorder struct {
	mock *MockTokenManager
}

// NewMockTokenManager creates a new mock instance.
func NewMockTokenManager(ctrl *gomock.Controller) *MockTokenManager {
	mock := &MockTokenManager{ctrl: ctrl}
	mock.recorder = &MockTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenManager) EXPECT() *MockTokenManagerMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockTokenManager) CreateToken(role, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", role, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockTokenManagerMockRecorder) CreateToken(role, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockTokenManager)(nil).CreateToken), role, email)
}

// VerifyToken mocks base method.
func (m *MockTokenManager) VerifyToken(tokenString string) (*auth.AuthData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", tokenString)
	ret0, _ := ret[0].(*auth.AuthData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockTokenManagerMockRecorder) VerifyToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockTokenManager)(nil).VerifyToken), tokenString)
}
