// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	auth "github.com/basedalex/avito-backend-2025-spring/internal/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddProductsHandler mocks base method.
func (m *MockService) AddProductsHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddProductsHandler", w, r)
}

// AddProductsHandler indicates an expected call of AddProductsHandler.
func (mr *MockServiceMockRecorder) AddProductsHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductsHandler", reflect.TypeOf((*MockService)(nil).AddProductsHandler), w, r)
}

// CloseLastReceptionHandler mocks base method.
func (m *MockService) CloseLastReceptionHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseLastReceptionHandler", w, r)
}

// CloseLastReceptionHandler indicates an expected call of CloseLastReceptionHandler.
func (mr *MockServiceMockRecorder) CloseLastReceptionHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseLastReceptionHandler", reflect.TypeOf((*MockService)(nil).CloseLastReceptionHandler), w, r)
}

// CreatePVZHandler mocks base method.
func (m *MockService) CreatePVZHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreatePVZHandler", w, r)
}

// CreatePVZHandler indicates an expected call of CreatePVZHandler.
func (mr *MockServiceMockRecorder) CreatePVZHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePVZHandler", reflect.TypeOf((*MockService)(nil).CreatePVZHandler), w, r)
}

// DeleteLastProductHandler mocks base method.
func (m *MockService) DeleteLastProductHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteLastProductHandler", w, r)
}

// DeleteLastProductHandler indicates an expected call of DeleteLastProductHandler.
func (mr *MockServiceMockRecorder) DeleteLastProductHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastProductHandler", reflect.TypeOf((*MockService)(nil).DeleteLastProductHandler), w, r)
}

// DummyLoginHandler mocks base method.
func (m *MockService) DummyLoginHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DummyLoginHandler", w, r)
}

// DummyLoginHandler indicates an expected call of DummyLoginHandler.
func (mr *MockServiceMockRecorder) DummyLoginHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyLoginHandler", reflect.TypeOf((*MockService)(nil).DummyLoginHandler), w, r)
}

// GetPVZHandler mocks base method.
func (m *MockService) GetPVZHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPVZHandler", w, r)
}

// GetPVZHandler indicates an expected call of GetPVZHandler.
func (mr *MockServiceMockRecorder) GetPVZHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVZHandler", reflect.TypeOf((*MockService)(nil).GetPVZHandler), w, r)
}

// LoginUserHandler mocks base method.
func (m *MockService) LoginUserHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoginUserHandler", w, r)
}

// LoginUserHandler indicates an expected call of LoginUserHandler.
func (mr *MockServiceMockRecorder) LoginUserHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUserHandler", reflect.TypeOf((*MockService)(nil).LoginUserHandler), w, r)
}

// PostReceptionHandler mocks base method.
func (m *MockService) PostReceptionHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostReceptionHandler", w, r)
}

// PostReceptionHandler indicates an expected call of PostReceptionHandler.
func (mr *MockServiceMockRecorder) PostReceptionHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostReceptionHandler", reflect.TypeOf((*MockService)(nil).PostReceptionHandler), w, r)
}

// RegisterUserHandler mocks base method.
func (m *MockService) RegisterUserHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterUserHandler", w, r)
}

// RegisterUserHandler indicates an expected call of RegisterUserHandler.
func (mr *MockServiceMockRecorder) RegisterUserHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUserHandler", reflect.TypeOf((*MockService)(nil).RegisterUserHandler), w, r)
}

// MockTokenManager is a mock of TokenManager interface.
type MockTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockTokenManagerMockRecorder
}

// MockTokenManagerMockRecorder is the mock recorder for MockTokenManager.
type MockTokenManagerMockRecorder struct {
	mock *MockTokenManager
}

// NewMockTokenManager creates a new mock instance.
func NewMockTokenManager(ctrl *gomock.Controller) *MockTokenManager {
	mock := &MockTokenManager{ctrl: ctrl}
	mock.recorder = &MockTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenManager) EXPECT() *MockTokenManagerMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockTokenManager) CreateToken(role, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", role, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockTokenManagerMockRecorder) CreateToken(role, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockTokenManager)(nil).CreateToken), role, email)
}

// VerifyToken mocks base method.
func (m *MockTokenManager) VerifyToken(tokenString string) (*auth.AuthData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", tokenString)
	ret0, _ := ret[0].(*auth.AuthData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockTokenManagerMockRecorder) VerifyToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockTokenManager)(nil).VerifyToken), tokenString)
}
